import {
  configure,
  getLogger,
  Logger as log4jsLogger,
  ConsoleAppender,
  DateFileAppender,
  Configuration
} from "log4js";
import * as path from "path";
import configs from "../../configs";

type ConsoleAppenderMapping = { [name: string]: ConsoleAppender };
type DateFileAppenderMapping = { [name: string]: DateFileAppender };
type AppenderMapping = ConsoleAppenderMapping | DateFileAppenderMapping;
type CategoryMapping = {
  [name: string]: { appenders: string[]; level: string };
};

const CATEGORY_NAMES: string[] = ["debug", "info", "warn", "error", "fatal"];
const LOG_DIR_PATH: string = configs.logDirPath;
const IS_DEV: boolean = configs.isDev;
const LOG_CONSOLE_APPENDER: ConsoleAppender = { type: "console" };

export default class Logger {
  static debug(message: string, ...rest: any[]) {
    if (IS_DEV) {
      Logger.getLogger("debug").debug(message, ...rest);
    }
  }

  static info(message: string, ...rest: any[]) {
    Logger.getLogger("info").info(message, ...rest);
  }

  static warn(message: string, ...rest: any[]) {
    Logger.getLogger("warn").warn(message, ...rest);
  }

  static error(message: string, ...rest: any[]) {
    Logger.getLogger("error").error(message, ...rest);
  }

  static fatal(message: string, ...rest: any[]) {
    Logger.getLogger("fatal").fatal(message, ...rest);
  }

  private static configured: boolean = false;

  private static getLogger(category: string): log4jsLogger {
    if (Logger.configured) {
      return getLogger(category);
    }

    const isDev = configs.isDev;

    const config: Configuration = {
      appenders: createAppenders(CATEGORY_NAMES),
      categories: createCategories(CATEGORY_NAMES)
    };

    configure(config);

    return getLogger(category);

    function createCategories(categoryNames: string[]): CategoryMapping {
      const categories: CategoryMapping = {};

      categories.default = {
        appenders: ["console"],
        level: "all"
      };

      categoryNames.forEach(categoryName => {
        categories[categoryName] = {
          appenders: IS_DEV ? ["console"] : [categoryName],
          level: "all"
        };
      });

      return categories;
    }

    function createAppenders(appenderNames: string[]): AppenderMapping {
      const appenders: AppenderMapping = createDateFileAppenders(appenderNames);

      if (isDev) {
        appenders.console = LOG_CONSOLE_APPENDER;
      }

      return appenders;
    }

    function createDateFileAppenders(appenderNames: string[]): AppenderMapping {
      const appenders: AppenderMapping = {};

      appenderNames.forEach(appenderName => {
        appenders[appenderName] = createDateFileAppender(appenderName);
      });

      return appenders;
    }

    function createDateFileAppender(appenderName: string): DateFileAppender {
      return {
        type: "dateFile",
        filename: LOG_DIR_PATH,
        pattern: path.join(path.sep, "yyyyMMdd", `${appenderName}.log`),
        alwaysIncludePattern: true
      };
    }
  }
}
